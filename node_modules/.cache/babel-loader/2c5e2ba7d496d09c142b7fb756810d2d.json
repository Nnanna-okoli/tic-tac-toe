{"ast":null,"code":"var _jsxFileName = \"/Users/nnannaforever/tic-tac-toe/src/TicTacToe/TicTacToe.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './TicTacToe.css'; // links to stylesheet\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TicTacToe = () => {\n  _s();\n\n  const [turn, setTurn] = useState('x'); // creating alternating turns - default 1st player is x\n\n  const [cells, setCells] = useState(Array(9).fill('')); // track the items that are clicked = set array of 9 items because 3x3 grid then set to an empty string that will be filled with x or o\n\n  const [winner, setWinner] = useState(); //\n  //checkForWinner stores the winner combinations \n\n  const checkForWinner = squares => {\n    let combos = {\n      across: [[0, 1, 2], [3, 4, 5], [6, 7, 8]],\n      down: [[0, 3, 6], [1, 4, 7], [2, 5, 8]],\n      diagnol: [[0, 4, 8], [2, 4, 6]]\n    }; // loops through each of the item in the squares array and check if they match the winning combo \n\n    for (let combo in combos) {\n      combos[combo].forEach(pattern => {\n        if (squares[pattern[0]] === '' || squares[pattern[1]] === '' || squares[pattern[2]] === '') {// do nothing\n        } else if (squares[pattern[0]] === squares[pattern[1]] && squares[pattern[1]] === squares[pattern[2]]) {\n          setWinner(squares[pattern[0]]);\n        }\n      });\n    }\n  }; //prevents the double click and notify the user when double click occurs \n\n\n  const handleClick = num => {\n    if (cells[num] !== '') {\n      alert('already clicked');\n      return;\n    }\n\n    let squares = [...cells]; // copying cells array into squares provided by the var at the top\n    // adding logic to alternate the turns for turn text\n\n    if (turn === 'x') {\n      squares[num] = 'x';\n      setTurn('o');\n    } else {\n      squares[num] = 'o';\n      setTurn('x');\n    }\n\n    checkForWinner(squares); //\n\n    setCells(squares); // update the state variable maintains the item in the array and remember what is clicked \n  }; // logic to restart the cells when button is clicked \n\n\n  const handleRestart = () => {\n    setWinner(null);\n    setCells(Array(9).fill(''));\n  };\n\n  const Cell = _ref => {\n    let {\n      num\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"td\", {\n      onClick: () => handleClick(num),\n      children: cells[num]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 16\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [\"Turn: \", turn, /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(Cell, {\n            num: 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Cell, {\n            num: 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Cell, {\n            num: 2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(Cell, {\n            num: 3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Cell, {\n            num: 4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Cell, {\n            num: 5\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(Cell, {\n            num: 6\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Cell, {\n            num: 7\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Cell, {\n            num: 8\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this), winner && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [winner, \" is the winner!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleRestart(),\n        children: \"Play Again!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TicTacToe, \"Z2GZewedcLDMwv9nXO0GaLLqJZM=\");\n\n_c = TicTacToe;\nexport default TicTacToe;\n\nvar _c;\n\n$RefreshReg$(_c, \"TicTacToe\");","map":{"version":3,"names":["React","useState","TicTacToe","turn","setTurn","cells","setCells","Array","fill","winner","setWinner","checkForWinner","squares","combos","across","down","diagnol","combo","forEach","pattern","handleClick","num","alert","handleRestart","Cell"],"sources":["/Users/nnannaforever/tic-tac-toe/src/TicTacToe/TicTacToe.js"],"sourcesContent":["import React, {useState} from 'react'\nimport './TicTacToe.css'; // links to stylesheet\n\nconst TicTacToe = () => {\n    const [turn, setTurn] = useState('x'); // creating alternating turns - default 1st player is x\n    const [cells, setCells] = useState(Array(9).fill('')); // track the items that are clicked = set array of 9 items because 3x3 grid then set to an empty string that will be filled with x or o\n    const [winner, setWinner] = useState(); //\n\n    //checkForWinner stores the winner combinations \n    const checkForWinner = (squares) => {\n        let combos = {\n            across: [\n                [0,1,2],\n                [3,4,5],\n                [6,7,8],\n            ],\n\n            down:   [\n                [0,3,6],\n                [1,4,7],\n                [2,5,8],\n            ],\n\n            diagnol: [\n                [0,4,8],\n                [2,4,6],\n            ],\n        };\n\n        // loops through each of the item in the squares array and check if they match the winning combo \n        for(let combo in combos) {\n            combos[combo].forEach((pattern) => {\n               if (\n\n                   squares[pattern[0]] === '' ||\n                   squares[pattern[1]] === '' ||\n                   squares[pattern[2]] === ''\n               ) {\n                   // do nothing\n               } else if (\n                   squares[pattern[0]] === squares[pattern[1]] &&\n                   squares[pattern[1]] === squares[pattern[2]]\n                ) {\n                    setWinner(squares[pattern[0]]);\n               }\n            });\n        }\n    };\n\n    //prevents the double click and notify the user when double click occurs \n    const handleClick = (num) => {\n        if(cells[num] !== '') {\n            alert('already clicked');\n            return;\n        }\n\n\n        let squares = [...cells]; // copying cells array into squares provided by the var at the top\n\n        // adding logic to alternate the turns for turn text\n        if (turn === 'x') {\n            squares[num] = 'x';\n            setTurn ('o');\n        } else {\n            squares[num] = 'o';\n            setTurn('x');\n        }\n\n    \n        checkForWinner(squares); //\n        setCells(squares); // update the state variable maintains the item in the array and remember what is clicked \n    };\n\n    // logic to restart the cells when button is clicked \n    const handleRestart = () => {\n        setWinner(null);\n        setCells(Array(9).fill(''));\n    }\n    \n    const Cell = ({ num }) => {\n        return <td onClick={() => handleClick(num)}>{cells[num]}</td>\n    }\n\n    \n\n  return (\n    <div className=\"container\"> {/* css container display flex - center */}\n        <table>\n            Turn: {turn}\n            <tbody>\n                <tr>\n                    <Cell num={0}/>\n                    <Cell num={1}/>\n                    <Cell num={2}/>\n                </tr>\n                <tr>\n                    <Cell num={3}/>\n                    <Cell num={4}/>\n                    <Cell num={5}/>\n                </tr>\n                <tr>\n                    <Cell num={6}/>\n                    <Cell num={7}/>\n                    <Cell num={8}/>\n                    {/* numbered all the cells to track which cell is clicked */}\n                </tr>\n            </tbody>\n        </table> \n        {/* 3 by 3 grid layout  */}\n        {winner && (\n            <>\n                <p>{winner} is the winner!</p>\n                <button onClick={() => handleRestart()}>Play Again!</button>\n            </>\n        )}\n    </div>\n  )\n}\n\nexport default TicTacToe;"],"mappings":"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"},"metadata":{},"sourceType":"module"}